#!/usr/bin/perl

#USAGE: Run with no options to get usage or with --help for basic details

#Robert W. Leach
#Princeton University
#Carl Icahn Laboratory
#Lewis Sigler Institute for Integrative Genomics
#Bioinformatics Group
#Room 137A
#Princeton, NJ 08544
#rleach@princeton.edu
#Copyright 2018

use warnings;
use strict;
use CommandLineInterface;

our $VERSION = '2.000';
setScriptInfo(VERSION => $VERSION,
              CREATED => '6/22/2017',
              AUTHOR  => 'Robert William Leach',
              CONTACT => 'rleach@princeton.edu',
              COMPANY => 'Princeton University',
              LICENSE => 'Copyright 2017',
              HELP    => << 'END_HELP'

This script sorts (and optionally filters) the rows/variants of a VCF file (containing data for 2 or more samples) based on the differences in the variant data between pairs of samples or user-defined sample groups.  "Difference" is determined by either the genotype call or allelic frequency.  The the pair of samples or sample groups used to represent the difference for a variant row is the one leading to the greatest difference in consistent genotype or average allelic frequencies (i.e. observation ratios) of the same variant state.

See --help --extended for more details.

END_HELP
	      ,
	      DETAILED_HELP => << 'END_AHELP'

This script works with VCF files generated by freeBayes (for SNP and small nucleotide variants) or svTyper (for structural variants).  It will work with any other VCF data that includes GT or AO, RO, and DP tags in the FORMAT string.

Each row in a VCF file will be assumed to represent a variant (or variant position).  In the context of this script, there are two ways to look at differences among the samples: genotype calls and the ratio of observations of a particular variant out of the total observatons.  We'll refer to this as either "allelic frequency" or "observation ratios" throughout the documentation.

DEFAULT SORTING BEHAVIOR

VCF rows/variants are sorted by the (maximum) degree of difference that exists between the pairs of sample groups you define.  If multiple pairs are defined, the maximum difference computed among those pairs is used in the sort.  How the degree of difference is calculated depends on whether the --genotype or --nogenotype flag is supplied.

If --genotype is supplied, sorting will be based on the degree of difference in genotype calls between the 2 sample groups.  Put simply, variants where all the genotype calls differ between sample group 1 and sample group 2 will be at the top of the results.  If the genotype calls within a group are not consistent, the rank of the row falls and it will appear lower in the results.  If all of the genotype calls between 2 sample groups are the same, the row will be at the bottom of the results.  If samples do not have genotype calls, the rank falls even lower.  The very bottom of the results will contain variant which have no genotype calls among any samples in the 2 groups.

If --nogenotype is supplied, sorting will be based on the degree of difference in allelic frequencies between the 2 samples groups.  The degree of difference between allelic frequencies will be the maximum difference in observation ratios among the samples, e.g. an 'A' in sample 1 is seen in 1 out of 10 reads that map over the variant position whereas an 'A' is seen in sample 2 in 10 out of 10 reads.  The difference in those observation ratios is 9/10 or 0.9.  The variant state (among all the observations in the 2 sample groups) with the largest difference in observation ratios between the samples in the 2 sample groups is selected to represent the row.  The difference in average ratios of each group is what is used in the sort.

SETTING A MINIMUM GROUP SIZE

Supplying a --min-group-size affects sorting and allows you to find which samples among 2 sample groups differ (by bringing them to the top of the sorted results).  By default, all group members are used to compute maximum difference between 2 sample groups as described above.

When --min-group-size is supplied with --nogentotype, the maximum difference between the sample groups' average observation ratios is computed twice, between N members of sample group 1 and M members of sample group 2.  When comparing sample groups, the maximum difference is determined by taking the greater difference of 2 comparisons: 1. the top N observation ratios of sample group 1 versus the bottom M (inverse) observation ratios of sample group 2.  2. the bottom N observation ratios of sample group 1 versus top M observation ratios of sample group 2.  In order to avoid meaningless results, either N or M must represent a majority of their respective sample groups.  It is recommended to always set -d to the group size for 1 of the 2 groups.  --min-group-size should only be used when the groups being compared are not 2 sets of replicates.

When --min-group-size is supplied with --gentotype, the maximum difference between the sample groups' is computed in the same manner as described above for --genotype, except calls within a sample group are allowed to differ as long as there exists a subgroup of at least size --min-group-size with a consistent genotype call.

DYNAMIC CREATION OF SAMPLE GROUPS

When pairs of sample groups are not supplied, sample groups are greedily determined on each row independently.  Up to 2 --min-group-size's can be supplied, but must not sum to more than the number of samples.  The default minimum group sizes are both 1.  Sorting is performed in the same manner, except (in the case of --nogenotype) the top N and bottom M samples compared are selected from a single list.  In the case of --genotype, the samples are ordered by genotype call abundance and assigned to the groups from either end (omitting those with no-calls).

GROWING SAMPLE GROUPS FROM THE MINIMUM GROUP SIZE

If you have supplied a --min-group-size that is less than the number of samples defined in the group, you can allow sample groups to grow using the --grow parameter.  This allows you to identify groups of different (i.e. non-replicate) samples that share a difference with the comparison group.  Growing groups behaves differently depending on whether --genotype or --nogenotype is supplied.

If --nogenotype is supplied, grow groups is done using the --separation-gap threshold.  It uses the difference in the obervation ratio of 1 group and its inverse observation ratio in the comparison group.  For example, if you supply `--grow --nogenotype --separation-gap 0.5`, samples will be greedily* added to the 2 groups in order of their difference with the current group's observation ratio average and stops just before the difference in the averages crosses the threshold of 0.5.

If --genotype is supplied, all members of a sample group matching a genotype call in the sample group of size --min-group-size are added to the group.  If sample groups are being created dynamically and the groups have genotype calls in common, no other samples of the common genotype call will be added.

* Sample groups are seeded with members from either the bottom or top set of observation ratios.  Samples in different groups are seeded from opposite ends (top or bottom).  Samples are then traversed top-down or bottom-up and greedily added to the respective sample group in order of ascending difference from the current group average.

FILTERING

There are 2 threshold options that can be used to filter variants that do not contain differences between the sample groups that meet the thresholds.  In --genotype mode, the threshold is --min-group-size.  In --nogenotype mode the threshold is the combination of --separation-gap and --min-group-size.

In --nogenotype mode, if the difference between the observation ratios between (all of the*) pairs of sample groups is less than the separation gap threshold, the row will not be printed.

In --genotype mode, if the (all of the*) pairs of sample groups share a common genotypoe call, the row will not be printed.

* In either case, if any pair of sample groups meets the threshold(s), the row will be printed regardless of whether or not any other pair fails the threshold(s).

EXAMPLE

To sort based on the difference between specific samples or groups of samples, those groups can be defined on the command line using -s.  You can specify a minimum number of samples in the groups to differ.  So for example, say you have 3 wildtype (WT) replicates and you would like to see differences that all 3 WT samples have with any one of a set of 10 mutant samples.  You would do that on the command line using the sample names:

    -s "wt1 wt2 wt3" -d 3   -s "m1 m2 m3 m4 m5 m6 m7 m8 m9 m10" -d 1

The largest difference that the average observation ratio of the WT samples has with 1 of the mutant samples will be at the top of the results.

END_AHELP
	     );

setDefaults(HEADER        => 1,
	    ERRLIMIT      => 3,
	    COLLISIONMODE => 'error',
	    DEFRUNMODE    => 'usage',
	    DEFSDIR       => undef);

my $format_index            = 8;
my $sample_name_start_index = $format_index + 1;

my $vcf_type_id =
  addInfileOption(GETOPTKEY   => 'i|vcf-file|input-file',
		  REQUIRED    => 1,
		  PRIMARY     => 1,
		  DEFAULT     => undef,
		  SMRY_DESC   => 'VCF input file.',
		  DETAIL_DESC => ('VCF input file generated either by ' .
				  'freeBayes or svTyper.'),
		  FORMAT_DESC => << 'END_FORMAT'

A VCF file is a plain text, tab-delimited file.  The format is generally described here: http://bit.ly/2sulKcZ and described in detail here: http://bit.ly/2gKP5bN

However, the important parts that this script relies on are:

1. The column header line (in particular - looking for the FORMAT and sample name columns).
2. The colon-delimited codes in the FORMAT column values, specifically (for SNP data produced by freeBayes and Structural Variant data produced by SVTyper) AO (the number of reads supporting the variant), RO (the number of reads supporting the reference), and DP (the number of reads that map at or over the variant position).
3. The colon-delimited values in the sample columns that correspond to the positions defined in the FORMAT column.

The file may otherwise be a standard VCF file containing header lines preceded by '##'.  Empty lines are OK and will be printed regardless of parameters supplied to this script.  Note, the --header and --no-header flags of this script do not refer to the VCF file's header, but rather the run info header of this script.

END_FORMAT
		 );

addOutfileSuffixOption(GETOPTKEY   => 'o|outfile-suffix',
		       PRIMARY     => 1,
		       DEFAULT     => undef,
		       SMRY_DESC   => 'Outfile suffix (appended to -i).',
		       FORMAT_DESC => << 'END_FORMAT'

The output file is essentially the same format as the input VCF files, except 3 columns are added at the beginning of the file:

1. Number of hits and a summary of the filters that were passed
2. A listing of variant support/mapped reads per sample (or a listing of the stuctural variant support values that passed cutoffs (SU, SR, and/or PE).
3. A listing of samples containing evidence for the variant

END_FORMAT
		 );

my $sample_groups = [];
add2DArrayOption(GETOPTKEY   => 's|sample-group',
		 TYPE        => 'string',
		 GETOPTVAL   => $sample_groups,
		 DEFAULT     => 'none',
		 SMRY_DESC   => ('A group of sample names for difference ' .
				 'comparisons.'),
		 DETAIL_DESC => << 'END_DETAIL'

This option must be supplied an even number of times (or once* or 0 times**).  Each pair of samples groups, in order, is compared to determine the maximum difference between the groups.  For example, if you have 3 wildtype samples and 4 mutant samples, you can define these 2 groups using -s 's1 s2 s3' -s 's4 s5 s6 s7' (where sample name 's1', 's2', and 's3' are the wildtype samples and 's4', 's5', 's6', and 's7' are mutant samples.  (All sample names must match the sample names in the VCF column headers row.)  The differences in variant states between these groups of samples will be used to sort the variants/rows of the VCF file.  See --extended --help for a description of how degree of difference is calculated.

* If only one group is defined, the second group is assumed to be the remainder of the samples.
** If no groups are defined, groups are dynamically determined for each variant/row.  See --help --extended for details.

END_DETAIL
		);

my $group_diff_mins = [];
addArrayOption(GETOPTKEY   => 'd|min-group-size',
	       TYPE        => 'integer',
	       GETOPTVAL   => $group_diff_mins,
	       DEFAULT     => 'group-size',
	       SMRY_DESC   => ('The minimum number of samples required to ' .
			       'differ from the partner group (to get a high ' .
			       'rank).'),
	       DETAIL_DESC => << 'END_DETAIL'

Each sample group defined by -s is accompanied by a (minimum) number of samples in that group with which to compute the maximum difference against its partner group.  Each instance of -s should have a -d value supplied.  The order of the -d values should correspond to the order of the -s sample groups they apply to.  The default for each group is the group size, but a smaller number can bespecified.  The purpose is best shown by example.  If you have 5 mutant samples and 3 replicate wildtype samples, you may want to find variants where 1 or more mutants differ from all 3 wildtype samples, thus -d for the mutant group would be '1' and -d for the wildtype group would be '3'.  In order to produce meaningful results, one group in each pair of groups must get a value that is larger than half the group size.  See --help --extended for details on how this affects variant sorting, sample group growing, and filtering.

END_DETAIL
		);

my $separation_gap = 0.3;
addOption(GETOPTKEY   => 'a|separation-gap',
	  TYPE        => 'float',
	  GETOPTVAL   => \$separation_gap,
	  DEFAULT     => $separation_gap,
	  SMRY_DESC   => ("Allelic frequency difference threshold [0-1]."),
	  DETAIL_DESC => ('The maximum difference between average ' .
			  'observation ratios for a given variant state ' .
			  '(e.g. a SNP value of "A") between groups defined ' .
			  'by -s (and -d) must be at least this value in ' .
			  'order to either be retained (see --filter|' .
			  '--nofilter) or grown (--grow|--nogrow).  This ' .
			  'option is only used when either --filter or ' .
			  '--grow are true.  See --help --extended for more ' .
			  'details.'));

my $use_gt = 1;
addOption(GETOPTKEY   => 'g|genotype',
	  TYPE        => 'negbool',
	  GETOPTVAL   => \$use_gt,
	  DEFAULT     => $use_gt,
	  SMRY_DESC   => ("Use or don't use genotype calls."),
	  DETAIL_DESC => ("Use or don't use the genotype call (i.e. the 'GT' " .
			  'value in the FORMAT string) for sorting rows, ' .
			  'growing sample groups, and filtering rows (see ' .
			  '--filter).  If --nogenotype is supplied, only ' .
			  'allelic frequencies will be used for these ' .
			  'functions.  See --help --extended for details.'));

my $filter = 1;
addOption(GETOPTKEY   => 'f|filter',
	  TYPE        => 'negbool',
	  GETOPTVAL   => \$filter,
	  DEFAULT     => $filter,
	  SMRY_DESC   => ('Filter variant rows whose sample groups do not ' .
			  'differ (enough).'),
	  DETAIL_DESC => ('Filter variant rows whose sample group pairs do ' .
			  'not meet thresholds defined by either `--genotype ' .
			  '--min-group-size <int>` or `--nogenotype ' .
			  '--min-group-size <int> --separation-gap ' .
			  '<float>`.  When --genotype is supplied, the ' .
			  'genotype calls in all samples in each minimum ' .
			  'group must not have any common genotype calls and ' .
			  'meet the minimum size requirement.  When ' .
			  '--nogenotype is supplied, the difference in ' .
			  'average observation ratios must be greater than ' .
			  'or equal to the --separation-gap.  See --help ' .
			  '--extended for more details.'));

my $grow = 1;
addOption(GETOPTKEY   => 'w|grow',
	  TYPE        => 'negbool',
	  GETOPTVAL   => \$grow,
	  DEFAULT     => $grow,
	  SMRY_DESC   => ('Add as many samples to sample groups as possible.'),
	  DETAIL_DESC => ('If the --min-group-size is less than the actual ' .
			  'sample group size, keep adding samples to the ' .
			  'minimum groups (from its remaining members) as ' .
			  'long as (if --nogenotype is supplied) the ' .
			  'difference in average observation ratios between ' .
			  'the groups is greater than -a or (if --genotype ' .
			  'is supplied) the genotype call is the same as ' .
			  'current members and different from all partner ' .
			  'group genotypes.  Note, this may lower the sort ' .
			  'order of a variant/row when --nogenotype is ' .
			  'supplied.'));

processCommandLine();

#There must be an even number of sample groups (or 1)
if(scalar(@$sample_groups) % 2 && scalar(@$sample_groups) != 1)
  {
    error("There must be an even number of sample groups (or 1), but [",
	  scalar(@$sample_groups),"] were supplied.  See the usage ",
	  "description for -s for details.",
	  {DETAIL => ('Groups are submitted in pairs and the difference in ' .
		      'their average observation ratios is used for sorting, ' .
		      'filtering, and growing.  If 1 is supplied, the second ' .
		      'group is automatically populated with the remainder')});
    quit(1);
  }

#Construct default values for the group_diff_mins if they weren't all supplied
if(scalar(@$sample_groups) &&
   scalar(@$sample_groups) > scalar(@$group_diff_mins))
  {
    my $all = (scalar(@$group_diff_mins) == 0);
    foreach my $sample_group_index (0..$#{$sample_groups})
      {
	if(scalar(@$group_diff_mins) < ($sample_group_index + 1))
	  {
	    if($all || ($group_diff_mins->[0] >
			scalar(@{$sample_groups->[$sample_group_index]})))
	      {$group_diff_mins->[$sample_group_index] =
		 scalar(@{$sample_groups->[$sample_group_index]})}
	    else
	      {$group_diff_mins->[$sample_group_index] = $group_diff_mins->[0]}
	  }
      }
  }

if(scalar(@$group_diff_mins) && scalar(@$sample_groups))
  {
    #There must be an equal number of group diff mins
    if((scalar(@$sample_groups) > 2 &&
	scalar(@$group_diff_mins) != scalar(@$sample_groups)) ||
       (scalar(@$sample_groups) <= 2 && scalar(@$group_diff_mins) > 2))
      {
	error("-d must be supplied 0, 1, 2, or the same number of times as ",
	      "-s.");
	quit(2);
      }
    #The values of the group diff mins must be less than or equal to the
    #corresponding group sizes
    elsif(scalar(@$group_diff_mins) <= scalar(@$sample_groups) &&
	  scalar(grep {$group_diff_mins->[$_] < 1 ||
			 $group_diff_mins->[$_] >
			   scalar(@{$sample_groups->[$_]})}
		 (0..$#{$group_diff_mins})))
      {
	error("The min group size (-d) [",join(',',@$group_diff_mins),
	      "] must be a positive value greater than 0 and less than or ",
	      "equal to the number of members in the corresponding sample ",
	      "group [",join(',',map {scalar(@$_)} @$sample_groups),"].  ",
	      "Unable to proceed.");
	quit(3);
      }
  }

#If this is the special case of 1 group (and possibly 2 min diff sizes)
if(scalar(@$sample_groups) == 1)
  {
    #If there are 2 min diff sizes, the first must represent the majority of its
    #group
    if(scalar(@$group_diff_mins) >= 1 &&
       $group_diff_mins->[0] <= (scalar(@{$sample_groups->[0]}) / 2))
      {
	error("When 1 sample group is supplied (implying that the second ",
	      "sample group is the remainder of the samples) and a min group ",
	      "size is supplied, the first size must represent a majority of ",
	      "the group size.");
	quit(4);
      }
  }
#NOTE: One of the group_diff_mins in each pair must represent a majority of the
#corresponding group
elsif(scalar(@$sample_groups) &&
      scalar(grep {($group_diff_mins->[$_] >
		    (scalar(@{$sample_groups->[$_]}) / 2)) ||
		      ($group_diff_mins->[$_ + 1] >
		       (scalar(@{$sample_groups->[$_ + 1]}) / 2))}
	     grep {$_ % 2 == 0} (0..$#{$sample_groups})) == 0)
  {
    error("One of each pair of group diff mins (-d) must represent a ",
	  "majority of the number of members in its corresponding sample ",
	  "group.",
	  {DETAIL => "One group must serve as an unambiguous reference " .
	   "genotype.  It can be a single sample or a set of replicate " .
	   "samples.  This makes the results more interpretable."});
    quit(5);
  }

if($separation_gap < 0 || $separation_gap > 1)
  {
    error("Invalid value for -a [$separation_gap].  Must be between 0 and 1 ",
	  "(inclusive).");
    quit(6);
  }

my $global_mode = '';

while(nextFileCombo())
  {
    my $inputFile  = getInfile();
    my $outputFile = getOutfile();

    openIn(*IN,$inputFile);

    my $line_num  = 0;
    my @samples   = ();
    my $data_line = 0;
    my @passed    = ();

    while(getLine(*IN))
      {
	$line_num++;

	#If this is a header line that is not the (first) column header line
	if(/^##/ || (scalar(@samples) && /^#/) || /^\s*$/)
	  {
	    print;
	    next;
	  }

	chomp;
	my @cols = split(/\t/,$_,-1);

	#If this is the (first) column header line
	if(/^#[^#].*\t/ && scalar(@samples) == 0)
	  {
	    #Get the index of the FORMAT column - we will assume that the
	    #sample columns start immediately after and go to the end
	    if(/\tFORMAT\t/)
	      {
		#Assuming only 1 FORMAT column header
		$format_index = (grep {$cols[$_] eq 'FORMAT'} (0..$#cols))[0];
		$sample_name_start_index = $format_index + 1;
	      }
	    else
	      {
		warning("FORMAT column header not found on column header ",
			"line.  Using default expected FORMAT column number [",
			($format_index + 1),"] and sample column start ",
			"number [",($sample_name_start_index + 1),"].");
	      }

	    #If -s was supplied, the sample names in the column header are
	    #necessary - otherwise, we can assume that the header is just
	    #malformed and that the samples are where we would otherwise expect
	    #them to be in a standard VCF file (as produced by FreeBayes).
	    if(scalar(@samples) &&
	       scalar(@cols) < ($sample_name_start_index + 1))
	      {
		error("No columns for sample names were found on the ",
		      "column header line: [$_].  Unable to finish ",
		      "processing file [$inputFile].",
		      {DETAIL => "Sample names in the column header are " .
		       "used to identify sample columns for use with the -s " .
		       "and -d parameters, and to find the number of " .
		       "supporting read and total reads for each record.  " .
		       "If your column header line is malformed, but the " .
		       "data is there and you do not supply -s or -d, you " .
		       "will still be able to proceed using the default " .
		       "FORMAT column number [",($format_index + 1),"] and " .
		       "sample column start number [",
		       ($sample_name_start_index + 1),"]."});

		last;
	      }

	    @samples = @cols[$sample_name_start_index..$#cols];
	    s/#//;

	    #Validate the sample names in the groups
	    if(scalar(@$sample_groups))
	      {unless(validateSampleGroupNames(\@samples,$sample_groups))
		 {quit(7)}}

	    #Handle a special case where auto-group creation is allowed
	    if(scalar(@$sample_groups) == 1)
	      {
		#Validate that there are enough samples to create a second group
		if(scalar(@{$sample_groups->[0]}) >= scalar(@samples))
		  {
		    error("Not enough samples [",scalar(@samples),"] to auto-",
			  "create second sample group (-s), given the first ",
			  "sample group size of [",
			  scalar(@{$sample_groups->[0]}),"].");
		    quit(6);
		  }

		#Create the second group
		push(@$sample_groups,
		     [grep {my $n=$_;
			    scalar(grep {$_ eq $n} @{$sample_groups->[0]}) == 0}
		      @samples]);

		#Validate any existing group diff min
		if(scalar(@$group_diff_mins) == scalar(@$sample_groups))
		  {
		    if($group_diff_mins->[1] > scalar(@{$sample_groups->[1]}) ||
		       $group_diff_mins->[1] < 1)
		      {
			error("Invalid min group size (-d) [",
			      $group_diff_mins->[1],"] for sample group of ",
			      "size [",scalar(@{$sample_groups->[1]}),"].");
			quit(7);
		      }
		  }
		#Add a new group diff min
		else
		  {push(@$group_diff_mins,scalar(@{$sample_groups->[1]}))}
	      }

	    #If there's not at least 2 min group sizes
	    if(scalar(@$group_diff_mins) < 2)
	      {
		#If there's 1 min group size, compute the size of the second one
		if(scalar(@$group_diff_mins))
		  {push(@$group_diff_mins,
			scalar(@samples) - $group_diff_mins->[0])}
		else
		  {push(@$group_diff_mins,1,1)}
	      }

	    #Print the new header
	    print("#NUMHITS,SEARCHCRITERIA\tSNPREAD/DEPTH\tSNPSAMPLES\t$_\n");

	    next;
	  }
	elsif(scalar(@samples) == 0)
	  {
	    warning("Column header line not found before data.  Using ",
		    "default expected FORMAT column number [",
		    ($format_index + 1),"] and sample column start number [",
		    ($sample_name_start_index + 1),"].");
	  }

	if(scalar(@cols) < ($sample_name_start_index + 1))
	  {
	    error("Sample data was not found on line: [$line_num] of VCF ",
		  "file [$inputFile].  Skipping line.",
		  {DETAIL => "Sample names in the column header are " .
		   "used to identify sample columns for use with the -s " .
		   "and -d parameters, and to find the number of " .
		   "supporting read and total reads for each record.  " .
		   "If your column header line is malformed, but the " .
		   "data is there and you do not supply -s or -d, you " .
		   "will still be able to proceed using the default " .
		   "FORMAT column number [",($format_index + 1),"] and " .
		   "sample column start number [",
		   ($sample_name_start_index + 1),"]."});

	    next;
	  }

	$data_line++;

	my $format_str = $cols[$format_index];
	my(@data)      = @cols[$sample_name_start_index..$#cols];

	debug("FORMAT string for data record [$data_line]: [$format_str].");

	#Determine the subindex of each piece of sample data based on the
	#FORMAT string by creating a hash
	my $format_subindex = 0;
	my $format_key_tosubindex = {};
	foreach my $key (split(/:/,$format_str,-1))
	  {$format_key_tosubindex->{$key} = $format_subindex++}

	if($genotype && !exists($format_key_tosubindex->{GT}))
	  {
	    error("Line [$line_num] does not contain the required tag [GT] ",
		  "(for running in --genotype mode) in the FORMAT column.  ",
		  "Skipping.");
	    next;
	  }
	elsif(!$genotype && scalar(grep {!exists($format_key_tosubindex->{$_})}
				   ('AO','RO','DP')))
	  {
	    error("Line [$line_num] does not contain the required tags [",
		  join(',',grep {!exists($format_key_tosubindex->{$_})}
		       ('AO','RO','DP')),
		  "] (for running in --nogenotype mode) in the FORMAT ",
		  "column.  Skipping.");
	    next;
	  }

	#Parse the sample info from all the sample columns
	my $sample_info = {};
	foreach my $format_subindex (0..$#samples)
	  {
	    #If there is no data for this sample (i.e. no reads mapped over the
	    #position of this variant)
	    if($data[$format_subindex] eq '.')
	      {
		#Create a bogus record so GT, DP, RO, & AO can be set to ./0
		$data[$format_subindex] =
		  '.:' . '0:'x(scalar(keys(%$format_key_tosubindex)) - 1);
		chop($data[$format_subindex]);
	      }

	    #Get the sample name for this sample column
	    my $sample = $samples[$format_subindex];

	    #Get the data specific to this sample
	    my @d = split(/:/,$data[$format_subindex],-1);

	    debug("Data for sample [$sample]: [",join(':',@d),"].");

	    #Create easy access to the sample info by creating a hash like:
	    #sample_info->{$samplename}->{GT} = value
	    $sample_info->{$samples[$format_subindex]} =
	      {map {$_ => $d[$format_key_tosubindex->{$_}]}
	       keys(%$format_key_tosubindex)};
	  }

	#






###############LEFT OFF HERE






	my $anything_passed = 0;
	my $pass_str = "$got,HITS>0" .
	  (scalar(@samples) > 1 ? ",HITS<" . scalar(@samples) : '') .
	    ($global_mode eq 'SV' ?
	     '' : ",SNP/DEP>=$min_support_ratio,DEP>=$min_read_depth") .
	       ($global_mode eq 'SNP' ?
		'' : ",SE>=$min_svs,PE>=$min_discords,SR>=$min_splits");
	if(scalar(@$sample_groups))
	  {
	    my $group_pair_rule = 0;
	    foreach my $pair_index (grep {$_ % 2 == 0} (0..$#{$sample_groups}))
	      {
		$group_pair_rule++;
		my @set1     = @{$sample_groups->[$pair_index]};
		my $set1_min = $group_diff_mins->[$pair_index];
		my @set2     = @{$sample_groups->[$pair_index + 1]};
		my $set2_min = $group_diff_mins->[$pair_index + 1];

		debug("$_\nSET1: [@set1] SET1MIN: $set1_min ",
		      "SET2: [@set2] SET2MIN: $set2_min");

		#If we got something, not all samples were hits (or there's
		#only 1 sample), and either:
		# - The first sample group was a hit for the alternate allele
		#   and the second sample group was not OR
		# - The first sample group was not a hit for the alternate
		#   allele and the second sample group was
		if($got > 0 &&
		   (scalar(@samples) == 1 || $got < scalar(@samples)) &&
		   ((scalar(grep {my $u=$_;scalar(grep {$_ eq $u} @set1)}
			    @hits) >= $set1_min &&
		     scalar(grep {my $u=$_;scalar(grep {$_ eq $u} @set2)}
			    grep {$mode eq 'SV' || exists($depths->{$_})}
			    @hits) < $set2_min &&
		     scalar(grep {$mode eq 'SV' || exists($depths->{$_})}
			    @set2) >= $set2_min) ||
		    (scalar(grep {my $u=$_;scalar(grep {$_ eq $u} @set1)}
			    grep {$mode eq 'SV' ||exists($depths->{$_})}
			    @hits) < $set1_min &&
		     scalar(grep {$mode eq 'SV' ||
				    exists($depths->{$_})} @set1) >=
		     $set1_min &&
		     scalar(grep {my $u=$_;scalar(grep {$_ eq $u} @set2)}
			    @hits) >= $set2_min)))
		  {
		    debug("PASSED POS1/NEG2: [",
			  scalar(grep {my $u=$_;scalar(grep {$_ eq $u} @set1)}
				 @hits),'/',
			  scalar(grep {my $u=$_;scalar(grep {$_ eq $u} @set2)}
				 grep {$mode eq 'SV' || exists($depths->{$_})}
				 @hits),
			  "] NEG1/POS2: [",
			  scalar(grep {my $u=$_;scalar(grep {$_ eq $u} @set1)}
				 grep {$mode eq 'SV' || exists($depths->{$_})}
				 @hits),'/',
			  scalar(grep {my $u=$_;scalar(grep {$_ eq $u} @set2)}
				 @hits),"]");
		    $anything_passed++;
		    $pass_str .= ",GROUPRULEPAIR$group_pair_rule\[SET(" .
		      join(',',@set1) . ")>=$set1_min DIFFERS FROM SET(" .
		      join(',',@set2) . ")>=$set2_min]";
		  }
		else
		  {debug("FAILED")}
	      }
	  }
	elsif($got > 0 && (scalar(@samples) == 1 || $got < scalar(@samples)))
	  {$anything_passed++}

	if($anything_passed)
	  {push(@passed,
		join('',
		     ("$pass_str\t",
		      join(',',($mode ne 'SV' ? @rats : @filts)),"\t",
		      join(',',@hits),"\t$_")))}
      }

    closeIn(*IN);

    openOut(*OUT,$outputFile);
    print(join("\n",rank(\@passed)),"\n");
    closeOut(*OUT);
  }


sub rank
  {
    my @lines = @{$_[0]};
    return(sort
	   {
	     #If we can parse the number of hits, the allelic support over
	     #total read ratio, and the sample names that passed the filtering
	     if($a=~/^(\d+)[^\t]+\t([^\t]+)\t([^\t]+)/)
	       {
		 my $ah       = $1; #number of 'a' hits
		 my $arats    = $2; #Comma delimited 'a' string of either SNP
                                    #support ratios or SV evidence, depending
                                    #on record type
		 my $asamps   = $3; #Comma delimited 'a' sample names
		 my @anums    = split(/,/,$arats);
		 my $amode    = ($arats =~ /SU|SR|PE/ ? 'SV' :
				 ($arats =~ /\d+\/\d+/ ? 'SNP' :
				  ($arats eq '' ? 'SNP' : 'ERROR')));

		 #SNP metrics
		 my $anumsum  = 0;  #Support ratio numerator sum
		 my $adensum  = 0;  #Support ratio denominator sum
		 my $asup     = 0;

		 #SV metric
		 my $asusup   = 0;
		 my $asrsup   = 0;
		 my $apesup   = 0;
		 my $abothsup = 0;

		 if($amode eq 'SNP')
		   {
		     foreach my $arat (@anums)
		       {
			 my($anum,$aden) = split(/\//,$arat);
			 $anumsum += $anum;
			 $adensum += $aden;
		       }
		     $asup = $anumsum / $adensum;
		   }
		 elsif($amode eq 'SV')
		   {
		     foreach my $arat (@anums)
		       {
			 my $asr = 0;
			 my $ape = 0;
			 if($arat =~ /SU(\d+)/)
			   {$asusup += $1}
			 if($arat =~ /SR(\d+)/)
			   {$asr = $1}
			 if($arat =~ /PE(\d+)/)
			   {$ape += $1}
			 if($asr && $ape)
			   {$abothsup += $asr + $ape}
			 $asrsup += $asr;
			 $apesup += $ape;
		       }
		   }
		 else
		   {
		     error("Unable to parse variant metrics.",
			   {DETAIL => ('Expecting a comma delimited list of ' .
				       'numeric fractions or coded read ' .
				       'counts (e.g. SU1/PE2/SR3) in the ' .
				       'second column.')});
		   }

		 if($b =~ /^(\d+)[^\t]+\t([^\t]+)\t([^\t]+)/)
		   {
		     my $bh       = $1; #number of 'b' hits
		     my $brats    = $2; #Comma delimited 'b' ratios string
		     my $bsamps   = $3; #Comma delimited 'b' sample names
		     my @bnums    = split(/,/,$brats);
		     my $bmode    = ($brats =~ /SU|SR|PE/ ? 'SV' :
				     ($brats =~ /\d+\/\d+/ ? 'SNP' :
				      ($brats eq '' ? 'SNP' : 'ERROR')));

		     #SNP metrics
		     my $bnumsum  = 0;
		     my $bdensum  = 0;
		     my $bsup     = 0;

		     #SV metric
		     my $bsusup   = 0;
		     my $bsrsup   = 0;
		     my $bpesup   = 0;
		     my $bbothsup = 0;

		     if($bmode eq 'SNP')
		       {
			 foreach my $brat (@bnums)
			   {
			     my($bnum,$bden) = split(/\//,$brat);
			     $bnumsum += $bnum;
			     $bdensum += $bden;
			   }
			 $bsup = $bnumsum / $bdensum;
		       }
		     elsif($bmode eq 'SV')
		       {
			 foreach my $brat (@bnums)
			   {
			     my $bsr = 0;
			     my $bpe = 0;
			     if($brat =~ /SU(\d+)/)
			       {$bsusup += $1}
			     if($brat =~ /SR(\d+)/)
			       {$bsr = $1}
			     if($brat =~ /PE(\d+)/)
			       {$bpe += $1}
			     if($bsr && $bpe)
			       {$bbothsup += $bsr + $bpe}
			     $bsrsup += $bsr;
			     $bpesup += $bpe;
			   }
		       }
		     else
		       {
			 error("Unable to parse variant metrics.",
			       {DETAIL => ('Expecting a comma delimited ' .
					   'list of numeric fractions or ' .
					   'coded read counts (e.g. ' .
					   'SU1/PE2/SR3) in the second ' .
					   'column.')});
		       }

		     #This is the end result - logic for sorting
		     if($amode ne $bmode)
		       {
			 if($amode eq 'SV') #and bmode is SNP
			   {
			     #Sometimes SU isn't shown in the results (if the
			     #user specified a different value for the other
			     #cutoffs at the command line), but one or both of
			     #the splits or discordants will definitely be
			     #there.
			     my $bsvsup =
			       ($bsusup ? $bsusup : $bsrsup + $bpesup);

			     #Number of hits
			     $bh <=> $ah ||

			       #All support for the SV versus all support for
			       #the SNP
			       $bsvsup <=> $anumsum ||

				 #SV support from both discordants and splits
				 #or support from total, splits, or discordants
				 $bbothsup <=> $anumsum ||
				    $bsusup <=> $anumsum ||
				      $bsrsup <=> $anumsum ||
					$bpesup <=> $anumsum ||

					  #Or finally - sample name
					  $asamps cmp $bsamps;
			   }
			 else #amode is SNP and bmode is SV
			   {
			     #Sometimes SU isn't shown in the results (if the
			     #user specified a different value for the other
			     #cutoffs at the command line), but one or both of
			     #the splits or discordants will definitely be
			     #there.
			     my $asvsup =
			       ($asusup ? $asusup : $asrsup + $apesup);

			     #Number of hits
			     $bh <=> $ah ||

			       #All support for the SV versus all support for
			       #the SNP
			       $bnumsum <=> $asvsup ||

				 #SV support from both discordants and splits
				 #or support from total, splits, or discordants
				 $bnumsum <=> $abothsup ||
				    $bnumsum <=> $asusup ||
				      $bnumsum <=> $asrsup ||
					$bnumsum <=> $apesup ||

					  #Or finally - sample name
					  $asamps cmp $bsamps;
			   }
		       }
		     else
		       {
			 #Note - using both SNP and SV metrics here does not
			 #matter - the other type will be all 0s

			 #Number of hits
			 $bh <=> $ah ||

			   #SNP support ratios or depth
			   $bsup <=> $asup || $bdensum <=> $adensum ||

			     #SV support from both discordants and splits
			     #or support from total, splits, or discordants
			     $bbothsup <=> $abothsup || $bsusup <=> $asusup ||
			       $bsrsup <=> $asrsup || $bpesup <=> $apesup ||

				 #Or finally - sample name
				 $asamps cmp $bsamps;
		       }
		   }
		 else
		   {-1}
	       }
	     else
	       {-1}
	   } grep {/^\d/} @lines);
  }

sub max
  {
    my @vals = @_;
    return(undef) unless(scalar(@vals));
    my $max  = $vals[0];
    foreach my $val (@vals)
      {if(!defined($max) || $val > $max)
	 {$max = $val}}
    return($max);
  }

sub validateSampleGroupNames
  {
    my $sample_names  = $_[0];
    my $sample_groups = $_[1];

    my $status = 1; #1 = success/validated
    my $unique = {};
    foreach my $sample (@$sample_names)
      {$unique->{$sample}++}
    foreach my $dupe (grep {$unique->{$_} > 1} keys(%$unique))
      {
	$status = 0;
	error("Sample name [$dupe] occurs [$unique->{$dupe}] in the vcf ",
	      "file.",
	      {DETAIL => 'Sample names must be unique when -s is supplied'});
      }

    my $missing = {};
    foreach my $pair_index ((0..$#{$sample_groups}))
      {
	foreach my $sample_name (grep {!exists($unique->{$_})}
				 @{$sample_groups->[$pair_index]})
	  {
	    $status = 0;
	    error("Sample name submitted with -s [$sample_name] was not ",
		  "found in the vcf file.",
		  {DETAIL => join('',('Sample names submitted with -s must ',
				      'exactly match those present on the ',
				      'header line in the vcf file (the line ',
				      'starting with "#CHROM").  The VCF ',
				      'file contains: [',
				      join(',',@$sample_names),'].'))});
	  }
      }

    return($status);
  }
